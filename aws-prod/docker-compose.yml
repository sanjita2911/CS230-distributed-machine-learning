version: "3.8"

services:
  redis:
    image: redis:latest
    container_name: redis-master
    ports:
      - "6379:6379"
    networks:
      - mlnet
    command: [ "redis-server", "--appendonly", "yes" ]

  storage:
    image: busybox
    container_name: shared-storage
    volumes:
      - /mnt/efs  # Creates a persistent volume at /mnt/efs
    command: ["sh", "-c", "mkdir -p /mnt/efs && tail -f /dev/null"]  # Keeps the container alive
    networks:
      - mlnet

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - mlnet
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "train:4:1,result:1:1,metrics:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - mlnet
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  master:
    build:
      context: .
      dockerfile: docker/Master.Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - ./master:/app
      - shared_volume:/mnt/efs/
    depends_on:
      - kafka
      - storage
    environment:
      - WORKERS=worker1:50051,worker2:50051,worker3:50051,worker4:50051
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=app/master.py
      - PYTHONUNBUFFERED=1
    networks:
      - mlnet

  worker1:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro  # Read-Only access for workers
    depends_on:
      - kafka
      - storage
    environment:
      - WORKER_ID=1
    networks:
      - mlnet

  worker2:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro  # Read-Only access for workers
    depends_on:
      - kafka
      - storage
    environment:
      - WORKER_ID=2
    networks:
      - mlnet

  worker3:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro  # Read-Only access for workers
    depends_on:
      - kafka
      - storage
    environment:
      - WORKER_ID=3
    networks:
      - mlnet

  worker4:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro  # Read-Only access for workers
    depends_on:
      - kafka
      - storage
    environment:
      - WORKER_ID=4
    networks:
      - mlnet

networks:
  mlnet:
    driver: bridge

volumes:
  shared_volume:
    name: shared-storage
    external: false  # Ensures Docker manages it
