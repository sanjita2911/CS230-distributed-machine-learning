version: "3.8"

services:
  redis:
    image: redis:latest
    container_name: redis-master
    ports:
      - "6379:6379"
    networks:
      - mlnet
    command: [ "redis-server", "--appendonly", "yes" ]

  storage:
    image: busybox
    container_name: shared-storage
    volumes:
      - shared_volume:/mnt/efs # Creates a persistent volume at /mnt/efs
    command: [ "sh", "-c", "mkdir -p /mnt/efs && tail -f /dev/null" ] # Keeps the container alive
    networks:
      - mlnet

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # MinIO Console UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data
    networks:
      - mlnet

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - mlnet
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "train:4:1,result:4:1,metrics:4:1,tasks:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - mlnet
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    restart: always
    networks:
      - mlnet

  master:
    build:
      context: .
      dockerfile: docker/Master.Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - ./master:/app
      - shared_volume:/mnt/efs/
    depends_on:
      - kafka
      - storage
      - redis
    environment:
      - WORKERS=worker1:50051,worker2:50051,worker3:50051,worker4:50051
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=app/master.py
      - PYTHONUNBUFFERED=1
    networks:
      - mlnet

  scheduler:
    build:
      context: .
      dockerfile: docker/Scheduler.Dockerfile
    ports:
      - "8000:8000" # FastAPI default port
    volumes:
      - ./scheduler:/app
      - shared_volume:/mnt/efs # Optional shared storage
    depends_on:
      - kafka
      - master
      - redis
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - SCHED_INGRESS_TOPIC=tasks
      - SCHED_EGRESS_TOPIC=train
      - WORKER_STATUS_TOPIC=metrics
      - WORKER_MEM_MB=16000
      - ALGO_WEIGHT_JSON={"xgboost":1.3,"svm":1.1}
      - WORKER_IDS=1,2,3,4
      - RUNTIME_MODEL_PATH=/mnt/efs/runtime_model.joblib
    networks:
      - mlnet

  worker1:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro # Read-Only access for workers
    depends_on:
      - kafka
      - storage
      - scheduler
      - redis
    environment:
      - SCHEDULER_ADDRESS=http://scheduler:8000
    networks:
      - mlnet

  worker2:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro # Read-Only access for workers
    depends_on:
      - kafka
      - storage
      - scheduler
      - redis
    environment:
      - SCHEDULER_ADDRESS=http://scheduler:8000
    networks:
      - mlnet

  worker3:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro # Read-Only access for workers
    depends_on:
      - kafka
      - storage
      - scheduler
      - redis
    environment:
      - SCHEDULER_ADDRESS=http://scheduler:8000
    networks:
      - mlnet

  worker4:
    build:
      context: .
      dockerfile: docker/Worker.Dockerfile
    volumes:
      - ./worker:/app
      - shared_volume:/mnt/efs:ro # Read-Only access for workers
    depends_on:
      - kafka
      - storage
      - scheduler
      - redis
    environment:
      - SCHEDULER_ADDRESS=http://scheduler:8000
    networks:
      - mlnet

networks:
  mlnet:
    driver: bridge

volumes:
  shared_volume:
    name: shared-storage
    external: false # Ensures Docker manages it
  minio_storage:
    name: s3-storage-volume
    external: false
